\babel@toc {italian}{}\relax 
\babel@toc {italian}{}\relax 
\contentsline {section}{\numberline {1}\textbf {Introduzione}}{3}{section.1}%
\contentsline {subsection}{\numberline {1.1}Contesto e motivazione}{3}{subsection.1.1}%
\contentsline {paragraph}{Negli ultimi anni, il crescente utilizzo di servizi digitali, API e applicazioni web ha reso fondamentale per aziende e sviluppatori disporre di strumenti affidabili per il monitoraggio e la gestione degli ambienti di produzione. \\Errori non rilevati, interruzioni di servizio o cali di prestazioni possono avere un impatto significativo sull’esperienza utente e sulla reputazione dei fornitori di servizi digitali.}{3}{paragraph*.1}%
\contentsline {paragraph}{Il progetto sviluppato durante il tirocinio nasce da questa esigenza concreta: realizzare una piattaforma SaaS (Software as a Service) in grado di monitorare in tempo reale lo stato di API e servizi web, notificando eventuali anomalie o malfunzionamenti. \\Il sistema consente agli utenti di configurare e gestire autonomamente i propri monitor, associati a specifici progetti, e di visualizzare tramite un'interfaccia mobile intuitiva lo stato delle proprie risorse.}{3}{paragraph*.2}%
\contentsline {subsection}{\numberline {1.2}Obiettivo}{3}{subsection.1.2}%
\contentsline {paragraph}{L’obiettivo della tesi è lo sviluppo del frontend di un’applicazione mobile multipiattaforma in Flutter, seguendo i principi di scalabilità, manutenibilità e modularità tipici della Clean Architecture. \\Il progetto prevede l’adozione delle best practice in ambito di progettazione software, con separazione netta tra logica e presentazione, uso di pattern architetturali, gestione dello stato reattiva e una particolare attenzione all’esperienza utente. \\L’intero sistema è pensato per essere facilmente estendibile e in grado di rispettare sia i requisiti funzionali definiti dal committente, sia requisiti non funzionali quali performance, responsività e sicurezza.}{3}{paragraph*.3}%
\contentsline {subsection}{\numberline {1.3}Stato dell’arte}{3}{subsection.1.3}%
\contentsline {paragraph}{Lo sviluppo di applicazioni accessibili su dispositivi con diversi sistemi operativi è oggi uno dei principali obiettivi del mondo IT.\\ La necessità di raggiungere un'utenza sempre più diversificata, che utilizza dispositivi Android, iOS, Web o Desktop, ha spinto l’evoluzione di tecnologie in grado di unificare lo sviluppo software. }{3}{paragraph*.4}%
\contentsline {subsubsection}{\numberline {1.3.1}Framework multipiattaforma}{3}{subsubsection.1.3.1}%
\contentsline {paragraph}{Negli ultimi anni, sono emersi framework multipiattaforma che permettono di scrivere una singola codebase ed eseguirla su più piattaforme. I più diffusi sono \textbf {React Native}, sviluppato da Facebook, e \textbf {Flutter}, sviluppato da Google. }{3}{paragraph*.5}%
\contentsline {paragraph}{Entrambe le soluzioni rappresentano validi strumenti per la creazione di applicazioni moderne, ma Flutter viene spesso preferito per progetti in cui l’esperienza utente, la reattività e il controllo sul design sono prioritari. }{4}{paragraph*.6}%
\contentsline {subsubsection}{\numberline {1.3.2}Vantaggi e svantaggi}{4}{subsubsection.1.3.2}%
\contentsline {paragraph}{VANTAGGI:}{4}{paragraph*.7}%
\contentsline {paragraph}{SVANTAGGI:}{4}{paragraph*.8}%
\contentsline {subsection}{\numberline {1.4}Descrizione UpApi}{5}{subsection.1.4}%
\contentsline {paragraph}{UpApi è una piattaforma SaaS (Software as a Service) progettata per il monitoraggio continuo e affidabile di ambienti di produzione digitali. Il sistema consente agli utenti di registrare un account personale, attivato tramite una verifica email, e di configurare autonomamente i propri ambienti da monitorare. Ogni utente può creare uno o più progetti, ciascuno dei quali rappresenta un ambiente digitale distinto (ad esempio, un sito web come amazon.it). All'interno di ogni progetto è possibile definire e gestire molteplici monitor, ciascuno dedicato al controllo di una funzionalità o risorsa specifica. I monitor eseguono controlli periodici, con cadenza personalizzabile, e restituiscono codici di stato HTTP (2xx, 3xx, 4xx, 5xx) per indicare lo stato del servizio monitorato. Oltre allo stato attuale, la piattaforma conserva uno storico completo degli esiti dei controlli effettuati, consentendo una rapida analisi delle prestazioni nel tempo. È inoltre prevista l’integrazione con un sistema di notifiche, che avvisa tempestivamente l’utente in caso di anomalie o interruzioni. Le notifiche possono essere personalizzate in base al tipo di errore o al monitor specifico. La piattaforma include anche funzionalità standard per la gestione del profilo utente, tra cui il recupero della password, la modifica dei dati personali e la gestione delle credenziali. }{5}{paragraph*.9}%
\contentsline {subsection}{\numberline {1.5}Scelte tecnologiche}{5}{subsection.1.5}%
\contentsline {paragraph}{Le tecnologie adottate sono state selezionate per costruire una soluzione moderna, stabile e performante, con particolare attenzione alla scalabilità, al supporto multi-piattaforma e alla qualità del codice. \\L’obiettivo era garantire uno sviluppo agile e sostenibile nel tempo, utilizzando strumenti collaudati e tecnologie in continua evoluzione. \\\\Di seguito le principali tecnologie adottate:}{5}{paragraph*.10}%
\contentsline {paragraph}{Flutter si è rivelato particolarmente adatto per garantire coerenza e qualità su più dispositivi, riducendo la complessità dello sviluppo. L’utilizzo di Cubit ha permesso di mantenere una chiara separazione tra logica di business e presentazione, semplificando la manutenzione futura. Inoltre, l’adozione di strumenti come Dio, GoRouter e Flutter Localization ha permesso di costruire un’app completa, modulare e pronta per una distribuzione internazionale. L’approccio orientato alla modularità e alla pulizia del codice si riflette nell’intero ciclo di sviluppo, in linea con i principi dell’ingegneria del software.}{6}{paragraph*.11}%
\contentsline {section}{\numberline {2}\textbf {Analisi preliminare}}{7}{section.2}%
\contentsline {section}{\numberline {3}\textbf {Progettazione}}{8}{section.3}%
\contentsline {section}{\numberline {4}\textbf {Descrizione implementazione/sviluppo delle varie parti}}{9}{section.4}%
\contentsline {section}{\numberline {5}\textbf {Problematiche}}{10}{section.5}%
\contentsline {section}{\numberline {6}\textbf {Risultati ottenuti}}{11}{section.6}%
\contentsline {section}{\numberline {7}\textbf {Conclusioni e sviluppi futuri}}{12}{section.7}%
